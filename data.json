{"question": {"desc": "Difference between del, remove and pop on lists\nIs there any difference between the above three methods to remove an element from a list?", "author": "Martijn Pieters", "upvotes": "372", "comments": []}, "answers": [{"desc": " Yes, remove removes the first matching value, not a specific index: del removes the item at a specific index: and pop removes the item at a specific index and returns it. Their error modes are different too:", "author": "\nAdam Porad\n\n10.3k22649\n\n", "upvotes": "541", "comments": [{"desc": "I thought del was a python 2 syntax holdover like print, but it still works in python 3.", "author": "jxramos"}, {"desc": "@jxramos: del is not a syntax holdover, no. The syntax is unchanged, just like return or if or while.", "author": "Martijn Pieters\u2666"}]}, {"desc": " Use del to remove an element by index, pop() to remove it by index if you need the returned value, and remove() to delete an element by value.  The latter requires searching the list, and raises ValueError if no such value occurs in the list. When deleting index i from a list of n elements, the computational complexities of these methods are", "author": "\n\n\n", "upvotes": "81", "comments": [{"desc": "Does pop require searching the list", "author": "sachin irukula"}, {"desc": "@kratos: No, see my edit.", "author": "Sven Marnach"}, {"desc": "+1 for complexity breakdown. Illustrates how delete and pop are constant when the element is at the end of the list.", "author": "Big Sharpie"}, {"desc": "Remember guys... anything index based is one shot O(n-1)... if you have to do a lookup (by value), it will traverse the collection until the element is found.", "author": "Pepito Fernandez"}, {"desc": "@PepitoFernandez Look-ups by index in a list are O(1) in Python.  (A list in Python is similar to a vector in C++.)", "author": "Sven Marnach"}]}, {"desc": " Since no-one else has mentioned it, note that del (unlike pop) allows the removal of a range of indexes because of list slicing: This also allows avoidance of an IndexError if the index is not in the list:", "author": "\n\n\n", "upvotes": "30", "comments": []}, {"desc": " Already answered quite well. This one from my end :)  Evidently, pop is the only one which returns the value, and remove is the only one which searches the object, while del limits itself to a simple deletion. ", "author": "\n\n\n", "upvotes": "22", "comments": [{"desc": "I like the diagram.", "author": "Kevin J. Rice"}, {"desc": "yh nice illustration", "author": "Kodejuice"}]}, {"desc": " pop    - Takes Index and returns Value remove - Takes value, removes first occurrence, and returns nothing  delete - Takes index, removes value at that index, and returns nothing", "author": "\nWool\n\n1269\n\n", "upvotes": "7", "comments": []}, {"desc": " While pop and delete both take indices to remove an element as stated in above comments. A key difference is the time complexity for them. The time complexity for pop() with no index is O(1) but is not the same case for deletion of last element. If your use case is always to delete the last element, it's always preferable to use pop() over delete(). For more explanation on time complexities, you can refer to https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt ", "author": "\nskashyap\n\n869\n\n", "upvotes": "2", "comments": [{"desc": "This is wrong in multiple ways. There is no such method as delete. The differences are that pop returns the value, and that del works on slices. In cases where pop works, del has exactly the same computational complexity (and is slightly faster by a constant term).", "author": "abarnert"}]}, {"desc": " Any operation/function on different data structures is defined for particular actions. Here in your case i.e. removing an element, delete, Pop and remove. (If you consider sets, Add another operation - discard)\nOther confusing case is while adding. Insert/Append. \nFor Demonstration, Let us Implement deque. deque is a hybrid linear data structure, where you can add elements / remove elements from both ends.(Rear and front Ends)  In here, see the operations: Operations have to return something. So, pop -  With and without an index. \nIf I don't want to return the value:\ndel self.items[0] Delete by value not Index:  remove :  let us consider the case of sets.", "author": "\nphanindravarma\n\n50237\n\n", "upvotes": "1", "comments": []}, {"desc": " You can also use remove to remove a value by index as well.   n would then refer to [1, 5]", "author": "\nMathias M\u00fcller\n\n16.3k123751\n\n", "upvotes": "-2", "comments": [{"desc": "Try n = [5, 3, 5], then n.remove(n[2]).", "author": "abarnert"}, {"desc": "@abarnert your use case works in sync with the below case n = [5,3,5] , then n.remove(5). Both of these remove the first encountered element from the list.", "author": "Akhil Ghatiki"}, {"desc": "@AkhilGhatiki n.remove(n[2]) removes n[0], not n[2]. So it\u2019s not just linear time for no reason (maybe not a big deal when N=3), it\u2019s also wrong (a big deal no matter what N is)", "author": "abarnert"}, {"desc": "@abarnert you are right !!!  I overlooked it. Thanks !!", "author": "Akhil Ghatiki"}]}]}